pipeline {
    agent none
    options { timestamps() }

    parameters {
        // Basic Parameters
        choice(choices: ['docker', 'local'], description: 'Test environment', name: 'ENVIRONMENT')
        choice(choices: ['chrome', 'firefox', 'edge'], description: 'Browser', name: 'BROWSER')
        choice(choices: ['develop', 'main', 'staging'], description: 'Branch', name: 'BRANCH_NAME')
        choice(choices: ['24', 'auto', '4', '8', '12', '16'], description: 'Parallel workers', name: 'PARALLEL_WORKERS')

        // Test Suite Selection
        booleanParam(defaultValue: true, description: 'Run SauceDemo tests', name: 'RUN_SAUCEDEMO')
        booleanParam(defaultValue: true, description: 'Run OrangeHRM tests', name: 'RUN_ORANGEHRM')
        booleanParam(defaultValue: true, description: 'Run Leetcode tests', name: 'RUN_LEETCODE')
        booleanParam(defaultValue: true, description: 'Run Banking tests', name: 'RUN_BANKING')
    }

    stages {
        stage('Setup') {
            agent any
            steps {
                script {
                    currentBuild.description = "Env: ${params.ENVIRONMENT} | Browser: ${params.BROWSER} | Workers: ${params.PARALLEL_WORKERS}"
                    echo """
                        üöÄ Starting Selenium Test Orchestrator
                        Environment: ${params.ENVIRONMENT}
                        Browser: ${params.BROWSER}
                        Branch: ${params.BRANCH_NAME}
                        Workers: ${params.PARALLEL_WORKERS}

                        Test Suites Selected:
                        SauceDemo: ${params.RUN_SAUCEDEMO ? '‚úÖ' : '‚ùå'}
                        OrangeHRM: ${params.RUN_ORANGEHRM ? '‚úÖ' : '‚ùå'}
                        Leetcode: ${params.RUN_LEETCODE ? '‚úÖ' : '‚ùå'}
                        Banking: ${params.RUN_BANKING ? '‚úÖ' : '‚ùå'}
                    """
                }
            }
        }

        stage('Run Tests in True Parallel') {
            parallel {
                stage('SauceDemo Tests') {
                    agent any
                    when { expression { params.RUN_SAUCEDEMO } }
                    steps {
                        script {
                            echo "üçÖ SauceDemo starting on agent: ${env.NODE_NAME} at: ${new Date()}"
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                build job: 'Selenium_Python_Tests_Saucedemo'
                            }
                            echo "üçÖ SauceDemo finished on agent: ${env.NODE_NAME} at: ${new Date()}"
                        }
                    }
                }

                stage('OrangeHRM Tests') {
                    agent any
                    when { expression { params.RUN_ORANGEHRM } }
                    steps {
                        script {
                            echo "üçä OrangeHRM starting on agent: ${env.NODE_NAME} at: ${new Date()}"
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                build job: 'Selenium_Python_Tests_Orangehrm'
                            }
                            echo "üçä OrangeHRM finished on agent: ${env.NODE_NAME} at: ${new Date()}"
                        }
                    }
                }

                stage('Leetcode Tests') {
                    agent any
                    when { expression { params.RUN_LEETCODE } }
                    steps {
                        script {
                            echo "üíª Leetcode starting on agent: ${env.NODE_NAME} at: ${new Date()}"
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                build job: 'Selenium_Python_Tests_Leetcode'
                            }
                            echo "üíª Leetcode finished on agent: ${env.NODE_NAME} at: ${new Date()}"
                        }
                    }
                }

                stage('Banking Tests') {
                    agent any
                    when { expression { params.RUN_BANKING } }
                    steps {
                        script {
                            echo "üè¶ Banking starting on agent: ${env.NODE_NAME} at: ${new Date()}"
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                build job: 'Selenium_Python_Tests_Banking', parameters: [
                                    string(name: 'BRANCH_NAME', value: params.BRANCH_NAME),
                                    string(name: 'BROWSER', value: params.BROWSER),
                                    string(name: 'ENVIRONMENT', value: params.ENVIRONMENT),
                                    string(name: 'PARALLEL_WORKERS', value: params.PARALLEL_WORKERS),
                                    booleanParam(name: 'HEADLESS', value: false),
                                    string(name: 'TEST_PATH', value: 'tests/banking/')
                                ]
                            }
                            echo "üè¶ Banking finished on agent: ${env.NODE_NAME} at: ${new Date()}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // ‚úÖ FIXED: Use simple echo instead of node allocation
                echo """
                    üìä Build Summary:
                    =================
                    Job: ${env.JOB_NAME} #${env.BUILD_NUMBER}
                    Result: ${currentBuild.result ?: 'SUCCESS'}
                    Duration: ${currentBuild.durationString}
                    SauceDemo: ${params.RUN_SAUCEDEMO ? 'Executed (Non-param)' : 'Skipped'}
                    OrangeHRM: ${params.RUN_ORANGEHRM ? 'Executed (Non-param)' : 'Skipped'}
                    Leetcode: ${params.RUN_LEETCODE ? 'Executed (Non-param)' : 'Skipped'}
                    Banking: ${params.RUN_BANKING ? 'Executed (Parameterized)' : 'Skipped'}
                    =================
                """
            }
        }

        success {
            script {
                echo """
                    ‚úÖ All tests completed successfully!
                    Duration: ${currentBuild.durationString}
                    Environment: ${params.ENVIRONMENT}
                    Browser: ${params.BROWSER}
                """
            }
        }

        failure {
            script {
                echo """
                    ‚ùå Some tests failed!
                    Check individual job console logs for details.
                    Duration: ${currentBuild.durationString}
                """
            }
        }

        unstable {
            script {
                echo """
                    ‚ö†Ô∏è Tests completed with some failures.
                    Some test suites failed but execution continued.
                    Duration: ${currentBuild.durationString}
                """
            }
        }
    }
}